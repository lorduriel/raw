<?php

namespace ${ControllersNamespace};

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

use ${ContractNamespace}\RawableModelClassContract;
use Illuminate\Support\Facades\Log;

use ${ModelsNamespace}\RawableModelClass;

use Validator;
use Exception;

class RawableModelClassController extends Controller
{

    
    protected $tag;
    protected $auth;
    protected $error;
    protected $success;
    protected $repository;

    public function __construct(RawableModelClassContract $repository)
    {
        $this->repository = $repository;
        $this->tag = "Controller:RawableModelClass";
        $this->error = ["status" => "Error", "code"=> 500];
        $this->success = ["status" => "Success", "code"=> 200];

        /**
        * @todo
        * TODO
        *
        * Auth implementation
        * Add your authenticatable/authorizable instance as you like
        * here or in each method
        */
        $this->auth = null;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        try {

            $validator = Validator::make(
                $request->all(), 
                ${storeValidations}
            );

            if (!$validator->fails()) {

                $model = new RawableModelClass();

                /**
                * @todo 
                * TODO 
                *
                * Save Implementation
                * 
                * $model->fill($request->all());
                */ 

                $data = $this->repository->createRawableModelClass($this->auth, $model);
                $this->success["data"] = $data;
                
                return response()->json($this->success);
            
            } else {

                Log::error($this->tag , ["ex" => $validator->errors()]);
                $this->error["errors"] = $validator->errors();
                return response()->json($this->error);

            }
            
        } catch (Exception $e) {

            Log::error($this->tag , ["ex" => $e->getMessage()]);
            $this->error["errors"] = $e->getMessage();
            return response()->json($this->error);

        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        try {
            
            $data = $this->repository->readRawableModelClass($this->auth, $id);
            $this->success["data"] = $data;
            return response()->json($this->success);

        } catch (Exception $e) {

            Log::error($this->tag , ["ex" => $e->getMessage()]);
            $this->error["errors"] = $e->getMessage();
            return response()->json($this->error);

        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        try {

            $validator = Validator::make(
                $request->all(), 
                ${updateValidations}
            );

            if (!$validator->fails()) {

                $model = RawableModelClass::findOrFail($id);

                /**
                * @todo 
                * TODO 
                *
                * Update Implementation
                * 
                * $model->fill($request->all());
                */ 

                $data = $this->repository->updateRawableModelClass($this->auth, $model);
                $this->success["data"] = $data;
                return response()->json($this->success);
            
            } else {

                Log::error($this->tag , ["ex" => $validator->errors()]);
                $this->error["errors"] = $validator->errors();
                return response()->json($this->error);
                
            }
            
        } catch (Exception $e) {

            Log::error($this->tag , ["ex" => $e->getMessage()]);
            $this->error["errors"] = $e->getMessage();
            return response()->json($this->error);

        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        try {

            $model = RawableModelClass::findOrFail($id);

            $data = $this->repository->deleteRawableModelClass($this->auth, $model);
            
            $this->success["data"] = $data;
            return response()->json($this->success);
            
        } catch (Exception $e) {

            Log::error($this->tag , ["ex" => $e->getMessage()]);
            $this->error["errors"] = $e->getMessage();
            return response()->json($this->error);

        }
    }

    /**
     * Get all RawableModelClassPlural
     *
     * @return \Illuminate\Http\Response
     *
     * You can add a count by un-commenting 1 line
     */
    public function getAllRawableModelClassPlural()
    {
        try {

            $data = $this->repository->getAllRawableModelClassPlural($this->auth);
            $this->success["data"] = $data;
            // $this->success["count"] = $data->count();
            return response()->json($this->success);
            
        } catch (Exception $e) {

            Log::error($this->tag , ["ex" => $e->getMessage()]);
            $this->error["errors"] = $e->getMessage();
            return response()->json($this->error);

        }
    }

    /**
     * Get paginated RawableModelClassPlural
     *
     * @param  int  $limit
     * @param  int  $offset
     * @param  mixed  $search
     * @return \Illuminate\Http\Response
     *
     * You can add a count to your paginated response by un-commenting the 2 commented lines below
     * or you can use the specific method
     */
    public function getPaginatedRawableModelClassPlural($limit, $offset, $search = null)
    {
        try {

            $data = $this->repository->getPaginatedRawableModelClassPlural($this->auth, $limit, $offset, $search);
            // $count =  $this->repository->getCountRawableModelClassPlural($this->auth, $search);
            $this->success["data"] = $data;
            // $this->success["count"] = $count;
            return response()->json($this->success);

        } catch (Exception $e) {

            Log::error($this->tag , ["ex" => $e->getMessage()]);
            $this->error["errors"] = $e->getMessage();
            return response()->json($this->error);

        }
    }

    /**
     * Get count RawableModelClassPlural
     *
     * @param  mixed  $search
     * @return \Illuminate\Http\Response
     */
    public function getCountRawableModelClassPlural($search = null)
    {
        try {

            $data = $this->repository->getCountRawableModelClassPlural($this->auth, $search);
            $this->success["data"] = $data;
            return response()->json($this->success);

        } catch (Exception $e) {

            Log::error($this->tag , ["ex" => $e->getMessage()]);
            $this->error["errors"] = $e->getMessage();
            return response()->json($this->error);

        }
    }
    
    ${hasOneRelationships}${belongsToRelationships}${hasManyRelationships}
}
